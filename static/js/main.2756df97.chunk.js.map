{"version":3,"sources":["components/form/form.js","components/title/title.js","components/chart/chart.js","App.js","index.js"],"names":["Form","props","preRender","i","rates","push","value","key","className","type","currentValue","onChange","currentPriceHandler","currentLabelChange","calculateValue","calculateLabelChange","calculateLabelValue","Title","href","Chart","charts","currentLabel","calculateLabel","labels","data","sort","a","b","Date","item","map","val","toFixed","ready","datasets","fill","lineTension","borderColor","borderWidth","height","options","title","display","text","fontSize","legend","position","maintainAspectRatio","App","useState","setData","currentPrice","setCurrentPrice","setCurrentLabel","setCalculateLabel","history","setHistory","useEffect","abortController","AbortController","signal","fetch","then","json","koef","abort","time","getDate","secondTime","setUTCDate","getUTCDate","transformDate","elem","month","getUTCMonth","slice","day","year","getUTCFullYear","toString","e","target","makeCalculate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2756df97.chunk.js","sourcesContent":["import React from 'react';\r\nimport './form.css'\r\n\r\nconst Form = (props) => {\r\n    let preRender = [];\r\n    for (let i in props.rates) {\r\n        preRender.push(<option value={i} key={i}>{i}</option>);\r\n    }\r\n    return (\r\n        <form>\r\n            \r\n            <fieldset className='form-block'>\r\n                <input type='number' className='form-control' value={props.currentValue} onChange={props.currentPriceHandler}></input>\r\n                <select className='form-control ' onChange={props.currentLabelChange}>\r\n                    {preRender}\r\n                </select>\r\n            </fieldset>\r\n            <fieldset className='form-block'>\r\n                <input type='number' className='form-control' value={props.calculateValue()} ></input>\r\n                <select className='form-control' onChange={props.calculateLabelChange} value={props.calculateLabelValue}>\r\n                    {preRender}\r\n                </select>\r\n            </fieldset>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './title.css';\r\n\r\nconst Title = ()=>{\r\n    return(\r\n        <div className='title'>\r\n            <a href='/'>\r\n                <span>Lawkakala <small>Exchange</small></span>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport './chart.css';\r\n\r\nconst Chart = ({ charts ,  currentLabel , calculateLabel }) => {\r\n    const labels = []\r\n    const data = [];\r\n    if (charts) {\r\n        charts.sort((a, b) => {\r\n            return new Date(a.item) - new Date(b.item)\r\n        })\r\n    }\r\n    charts.map((val) => {\r\n        labels.push(val.item);\r\n        data.push(val.val.toFixed(3))\r\n    })\r\n\r\n    const ready = {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            fill: false,\r\n            lineTension: 0.5,\r\n            borderColor: '#f3eac2',\r\n            borderWidth: 2,\r\n            data\r\n          }\r\n        ]\r\n      }\r\n\r\n    return (\r\n        <div className='chart'>\r\n            <Line height='100%'\r\n                data={ready}\r\n                options={{\r\n                    title: {\r\n                        display: true,\r\n                        text: `The rate ${currentLabel} to ${calculateLabel}`,\r\n                        fontSize: 20\r\n                    },\r\n                    legend: {\r\n                        display: false,\r\n                        position: 'top'\r\n                    },\r\n                    maintainAspectRatio: false\r\n                    \r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Form from './components/form/form';\r\nimport './App.css';\r\nimport Title from './components/title/title';\r\nimport Chart from './components/chart/chart'\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [currentPrice, setCurrentPrice] = useState(1);\r\n  const [currentLabel, setCurrentLabel] = useState('CAD');\r\n  const [calculateLabel, setCalculateLabel] = useState('USD');\r\n  const [history, setHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n\r\n\r\n    fetch(`https://api.exchangeratesapi.io/latest?base=${currentLabel}`, { signal: signal })\r\n      .then(data => data.json())\r\n      .then(koef => setData(koef.rates));\r\n\r\n    return function cleanup() {\r\n      abortController.abort();\r\n    }\r\n  }, [currentLabel]);\r\n\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n\r\n    const time = getDate();\r\n    fetch(`https://api.exchangeratesapi.io/history?base=${currentLabel}&start_at=${time[1]}&end_at=${time[0]}&symbols=${calculateLabel}`,\r\n      { signal: signal })\r\n      .then(data => data.json())\r\n      .then(koef => {\r\n        const data = []\r\n        for (let item in koef.rates) {\r\n          data.push({ item, val: koef.rates[item][calculateLabel] })\r\n        }\r\n        setHistory(data)\r\n      });\r\n\r\n    return function cleanup() {\r\n      abortController.abort();\r\n    }\r\n  }, [calculateLabel, currentLabel]);\r\n\r\n  const getDate = () => {\r\n    const time = new Date();\r\n    const secondTime = new Date();\r\n    secondTime.setUTCDate(secondTime.getUTCDate() - 20);\r\n    const transformDate = (elem) => {\r\n      const month = ('0' + elem.getUTCMonth()).slice(-2);\r\n      const day = ('0' + elem.getUTCDate()).slice(-2);\r\n      const year = elem.getUTCFullYear().toString();\r\n      return `${year}-${month}-${day}`;\r\n    }\r\n    return [transformDate(time), transformDate(secondTime)];\r\n  }\r\n  const currentLabelChange = async (e) => {\r\n    setCurrentLabel(e.target.value);\r\n  }\r\n  const calculateLabelChange = (e) => {\r\n    setCalculateLabel(e.target.value)\r\n  }\r\n  const currentPriceHandler = (e) => {\r\n    setCurrentPrice(e.target.value);\r\n  }\r\n\r\n  const makeCalculate = () => {\r\n    const result = currentPrice * data[calculateLabel];\r\n    return result.toFixed(2);\r\n  }\r\n  makeCalculate();\r\n  return (\r\n    <Fragment>\r\n      <div className='container'>\r\n        <Title></Title>\r\n        <Form\r\n          currentValue={currentPrice}\r\n          calculateValue={makeCalculate}\r\n          rates={data}\r\n          currentLabelChange={currentLabelChange}\r\n          calculateLabelChange={calculateLabelChange}\r\n          currentPriceHandler={currentPriceHandler}\r\n          calculateLabelValue={calculateLabel}\r\n        ></Form>\r\n        <Chart charts={history} currentLabel={currentLabel} calculateLabel={calculateLabel}></Chart>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}